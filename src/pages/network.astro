---
import BaseLayout from "../layouts/BaseLayout.astro";
import fetchApi from "../lib/strapi";
import type NetworkMember from "../interfaces/network-member";
import type NetworkPage from "../interfaces/network-page";
import { SEO } from "astro-seo";

const networkMembers = await fetchApi<NetworkMember[]>({
  endpoint: "network-members",
  wrappedByKey: "data",
  query: {
    // @ts-ignore
    populate: "*",
    // @ts-ignore
    pagination: {
      pageSize: 100,
    },
  },
});

const networkPageData = await fetchApi<NetworkPage>({
  endpoint: "network-page",
  wrappedByKey: "data",
  query: {
    // @ts-ignore
    populate: [
      "deep",
      "seo",
      "seo.title",
      "seo.description",
      "seo.canonical",
      "seo.ogTitle",
      "seo.ogDescription",
      "seo.ogImage",
      "seo.twitterTitle",
      "seo.twitterDescription",
      "seo.twitterImage",
    ],
  },
});

const seoData = {
  title: networkPageData?.attributes?.seo?.title,
  titleDefault: "EM GUIDE",
  titleTemplate: "%s â€“ Music Magazine Network",
  description: networkPageData?.attributes?.seo?.description,
  canonical: networkPageData?.attributes?.seo?.canonical ?? "",
  openGraph: {
    basic: {
      title: networkPageData?.attributes?.seo?.ogTitle ?? "EM GUIDE",
      type: "website",
      image: networkPageData?.attributes?.seo?.ogImage?.data?.attributes?.url
        ? `${import.meta.env.PUBLIC_ASSET_URL}${networkPageData?.attributes?.seo?.ogImage?.data?.attributes?.url}`
        : `${Astro.site}placeholder_og.png`,
      url: networkPageData?.attributes?.seo?.canonical ?? "",
    },
    optional: {
      description:
        networkPageData?.attributes?.seo?.ogDescription ??
        networkPageData?.attributes?.seo?.description,
    },
    image: {
      secureUrl: networkPageData?.attributes?.seo?.ogImage?.data?.attributes
        ?.url
        ? `${import.meta.env.PUBLIC_ASSET_URL}${networkPageData?.attributes?.seo?.ogImage?.data?.attributes?.url}`
        : `${Astro.site}placeholder_og.png`,
    },
  },
  twitter: {
    card: "summary_large_image",
    title:
      networkPageData?.attributes?.seo?.twitterTitle ??
      networkPageData?.attributes?.seo?.title,
    description:
      networkPageData?.attributes?.seo?.twitterDescription ??
      networkPageData?.attributes?.seo?.description,
    image: networkPageData?.attributes?.seo?.twitterImage?.data
      ? `${import.meta.env.PUBLIC_ASSET_URL}${networkPageData?.attributes?.seo?.twitterImage?.data?.attributes?.url}`
      : `${Astro.site}placeholder_tw.png`,
  },
};
---

<BaseLayout seoData={seoData}>
  <div
    class="space-y-20 bg-arrow-pink-background bg-no-repeat bg-[right_center] mb-20"
  >
    {
      networkMembers?.length > 0 &&
        networkMembers
          .sort((a, b) => a.attributes.rank - b.attributes.rank)
          .map((member) => {
            return (
              <section class="container relative mx-auto px-4 flex flex-col lg:flex-row sm:flex-row sm:space-x-4 lg:space-x-8">
                <div class="w-40 flex justify-center flex-shrink-0 mb-6 sm:inline-block sm:mb-0">
                  {member.attributes?.logo.data && (
                    <>
                      {member.attributes?.url ? (
                        <a class="group" href={member.attributes?.url}>
                          <img
                            loading="lazy"
                            src={`${import.meta.env.PUBLIC_ASSET_URL}${member.attributes?.logo.data.attributes?.url}`}
                            alt=""
                            class="w-40 h-auto group-hover:opacity-95 transition-opacity duration-200 ease-in-out"
                          />
                        </a>
                      ) : (
                        <img
                          loading="lazy"
                          src={`${import.meta.env.PUBLIC_ASSET_URL}${member.attributes?.logo.data.attributes?.url}`}
                          alt=""
                          class="w-40 h-auto"
                        />
                      )}
                    </>
                  )}
                </div>
                <div>
                  {member.attributes?.url ? (
                    <a
                      class="hover:text-accent transition-colors duration-200 ease-in-out"
                      href={member.attributes?.url}
                    >
                      <h1 class="text-xl font-normal lg:text-2xl font-display">
                        {member.attributes?.name}
                      </h1>
                    </a>
                  ) : (
                    <h1 class="text-xl font-normal lg:text-2xl font-display">
                      {member.attributes?.name}
                    </h1>
                  )}
                  <div
                    class="mt-5 lg:mt-7 [&>p]:mb-4 [&>p]:text-xl"
                    set:html={member.attributes.description}
                  />
                </div>
              </section>
            );
          })
    }
  </div>
</BaseLayout>
