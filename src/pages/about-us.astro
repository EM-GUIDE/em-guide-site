---
import BaseLayout from "../layouts/BaseLayout.astro";
import ImagesWithDecoration from "../components/ImagesWithDecoration.astro";
import FeaturedContent from "../components/FeaturedContent.astro";
import TextWithSideImage from "../components/TextWithSideImage.astro";
import type AboutPage from "../interfaces/about-page";
import fetchApi from "../lib/strapi";
import { SEO } from "astro-seo";

const aboutPageData = await fetchApi<AboutPage>({
  endpoint: "about-us-page",
  wrappedByKey: "data",
  query: {
    // @ts-ignore
    populate: [
      "deep",
      "seo",
      "seo.title",
      "seo.description",
      "seo.canonical",
      "seo.ogTitle",
      "seo.ogDescription",
      "seo.ogImage",
      "seo.twitterTitle",
      "seo.twitterDescription",
      "seo.twitterImage",
    ],
  },
});
---

<BaseLayout>
  {
    aboutPageData && aboutPageData.attributes?.seo && (
      <SEO
        title={aboutPageData?.attributes?.seo?.title}
        titleDefault="EM GUIDE"
        titleTemplate="%s â€“ Music Magazine Network"
        description={aboutPageData?.attributes?.seo?.description}
        canonical={aboutPageData?.attributes?.seo?.canonical ?? ""}
        openGraph={
          aboutPageData?.attributes?.seo?.ogTitle &&
          aboutPageData?.attributes?.seo?.ogImage?.data?.attributes?.url
            ? {
                basic: {
                  title:
                    aboutPageData?.attributes?.seo?.ogTitle ??
                    aboutPageData?.attributes?.seo?.title,
                  type: "website",
                  image: aboutPageData?.attributes?.seo?.ogImage?.data
                    ?.attributes?.url
                    ? `${import.meta.env.PUBLIC_ASSET_URL}${aboutPageData?.attributes?.seo?.ogImage?.data?.attributes?.url}`
                    : "",
                  url: aboutPageData?.attributes?.seo?.canonical ?? "",
                },
                optional: {
                  description:
                    aboutPageData?.attributes?.seo?.ogDescription ??
                    aboutPageData?.attributes?.seo?.description,
                },
              }
            : undefined
        }
        twitter={{
          card: "summary_large_image",
          title:
            aboutPageData?.attributes?.seo?.twitterTitle ??
            aboutPageData?.attributes?.seo?.title,
          description:
            aboutPageData?.attributes?.seo?.twitterDescription ??
            aboutPageData?.attributes?.seo?.description,
          image: aboutPageData?.attributes?.seo?.twitterImage?.data
            ? `${import.meta.env.PUBLIC_ASSET_URL}${aboutPageData?.attributes?.seo?.twitterImage?.data?.attributes?.url}`
            : "",
        }}
      />
    )
  }
  {
    aboutPageData.attributes?.content?.map((component) => {
      if (component.__component === "interactive.slider") {
        return (
          <section class="relative bg-no-repeat bg-cover lg:bg-contain pt-14 pb-28 mb-28 bg-carousel-background bg-[-50%] lg:bg-[160%] xl:bg-[120%]">
            <div
              id="image-carousel"
              class="container relative mx-auto px-4 splide"
              aria-label="Beautiful Images"
            >
              <div class="absolute bottom-0 z-10 left-0 flex justify-between w-full px-8 pt-2 translate-y-full lg:pt-0 lg:-translate-y-1/2 splide__arrows lg:top-1/2">
                <button class="w-16 splide__arrow splide__arrow--prev">
                  <svg
                    class="h-fit"
                    width="98"
                    height="95"
                    viewBox="0 0 98 95"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M2.99999 47.4705L42.4006 7.10655C47.9646 1.40645 59.0012 4.71391 58.2227 17.0289L45.4288 30.1356L77.6739 30.1415L94.5894 47.4705L76.7695 65.7261L46.3389 65.7261L55.1601 74.763C60.7185 80.4689 57.4957 91.7694 45.4631 90.9719L2.99999 47.4705Z"
                      class="text-accent sm:text-white"
                      stroke="currentColor"
                      stroke-width="4"
                      stroke-miterlimit="10"
                    />
                  </svg>
                </button>
                <button class="w-16 splide__arrow splide__arrow--next">
                  <svg
                    class="h-fit"
                    width="98"
                    height="92"
                    viewBox="0 0 98 92"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M94.5894 46.4706L55.1888 86.8345C49.6247 92.5346 38.5882 89.2272 39.3667 76.9121L52.1606 63.8054L19.9154 63.7996L2.99999 46.4706L20.8198 28.215L51.2504 28.215L42.4292 19.1781C36.8709 13.4721 40.0937 2.17163 52.1262 2.96917L94.5894 46.4706Z"
                      class="text-white"
                      stroke="currentColor"
                      stroke-width="4"
                      stroke-miterlimit="10"
                    />
                  </svg>
                </button>
              </div>

              <ul class="z-10 absolute w-full bottom-8 splide__pagination [&>li]:flex [&>li>button]:border [&>li>button]:lg:border-2 [&>li>button]:border-white [&>li>button]:w-4 [&>li>button]:lg:w-6 [&>li>button]:h-1 [&>li]:h-1 [&>li>button]:lg:h-2 [&>li]:lg:h-2 [&>li>button.is-active]:bg-white [&>li:first-child>button]:rounded-l-2xl [&>li:last-child>button]:rounded-r-2xl" />

              <div class="splide__track">
                <ul class="bg-white splide__list">
                  {component.slides.map((slide) => {
                    return (
                      <li class="relative splide__slide">
                        {slide.image.data && (
                          <img
                            loading="lazy"
                            src={`${import.meta.env.PUBLIC_ASSET_URL}${slide.image.data.attributes?.url}`}
                            alt=""
                            class="w-full h-auto object-cover aspect-[5/4] lg:aspect-[9/4]"
                          />
                        )}
                        {slide.url ? (
                          <a
                            href={slide.url}
                            class="absolute inline-block w-full px-10 bottom-14 lg:px-28 group"
                            aria-label="Link to slide"
                          >
                            {slide.text && (
                              <h4 class="text-2xl leading-normal text-center text-white lg:text-4xl font-display">
                                {slide.text}
                              </h4>
                            )}
                          </a>
                        ) : (
                          <div class="absolute inline-block w-full px-10 bottom-14 lg:px-28">
                            <h4 class="text-2xl leading-normal text-center text-white lg:text-4xl font-display">
                              {slide.text}
                            </h4>
                          </div>
                        )}
                      </li>
                    );
                  })}
                </ul>
              </div>
            </div>
          </section>
        );
      }
      if (component.__component === "static.featured-content") {
        return (
          <section class="container px-4 mx-auto mb-20">
            <FeaturedContent
              title={component.title}
              description={component.description}
              image={component.image.data}
              button={component.button}
            />
          </section>
        );
      }
      if (component.__component === "static.wysiwyg") {
        return (
          <section class="container px-4 mx-auto mb-20">
            <div
              class="[&>p]:text-xl [&>p]:mb-4 [&>h3]:mb-4 [&>h3]:font-display [&>h3]:font-bold [&>h3]:text-xl [&>blockquote]:px-2 [&>blockquote]:py-2.5 [&>blockquote]:bg-accent [&>blockquote]:font-display [&>blockquote]:text-2l [&>blockquote]:md:text-2xl [&>blockquote]:mb-4"
              set:html={component.content}
            />
          </section>
        );
      }
      if (component.__component === "static.images-with-decoration") {
        return (
          component.images.data?.length > 0 && (
            <section>
              <ImagesWithDecoration images={component.images.data} />
            </section>
          )
        );
      }
      if (component.__component === "static.text-with-side-image") {
        return (
          <section class="container px-4 mx-auto mb-20">
            <TextWithSideImage
              text={component.text}
              image={component.image.data}
            />
          </section>
        );
      }
    })
  }
</BaseLayout>
