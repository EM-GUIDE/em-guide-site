---
import BaseLayout from "../layouts/BaseLayout.astro";
import fetchApi from "../lib/strapi";
import ContentPreview from "../components/ContentPreview.astro";
import ImagesWithDecoration from "../components/ImagesWithDecoration.astro";
import FeaturedContent from "../components/FeaturedContent.astro";
import Slider from "../components/Slider.astro";
import TextWithSideImage from "../components/TextWithSideImage.astro";

import type NetworkMember from "../interfaces/network-member";
import type HomePage from "../interfaces/home-page";
const networkMembers = await fetchApi<NetworkMember[]>({
  endpoint: "network-members",
  wrappedByKey: "data",
  query: {
    populate: "*",
    // @ts-expect-error
    pagination: {
      pageSize: 100,
    },
  },
});

const homePageData = await fetchApi<HomePage>({
  endpoint: "home-page",
  wrappedByKey: "data",
  query: {
    // @ts-ignore
    populate: [
      "deep",
      "slide",
      "slide.image",
      "featuredContent",
      "featuredContent.image",
      "featuredContent.button",
      "content",
      "seo",
      "seo.title",
      "seo.description",
      "seo.canonical",
      "seo.ogTitle",
      "seo.ogDescription",
      "seo.ogImage",
      "seo.twitterTitle",
      "seo.twitterDescription",
      "seo.twitterImage",
    ],
  },
});

const seoData = {
  title: homePageData?.attributes?.seo?.title,
  titleDefault: "EM GUIDE",
  titleTemplate: "%s â€“ Music Magazine Network",
  description: homePageData?.attributes?.seo?.description,
  canonical: homePageData?.attributes?.seo?.canonical ?? "",
  openGraph: {
    basic: {
      title: homePageData?.attributes?.seo?.ogTitle ?? "EM GUIDE",
      type: "website",
      image: homePageData?.attributes?.seo?.ogImage?.data?.attributes?.url
        ? `${import.meta.env.PUBLIC_ASSET_URL}${homePageData?.attributes?.seo?.ogImage?.data?.attributes?.url}`
        : `${Astro.site}placeholder_og.png`,
      url: homePageData?.attributes?.seo?.canonical ?? "",
    },
    optional: {
      description:
        homePageData?.attributes?.seo?.ogDescription ??
        homePageData?.attributes?.seo?.description,
    },
    image: {
      secureUrl: homePageData?.attributes?.seo?.ogImage?.data?.attributes?.url
        ? `${import.meta.env.PUBLIC_ASSET_URL}${homePageData?.attributes?.seo?.ogImage?.data?.attributes?.url}`
        : `${Astro.site}placeholder_og.png`,
    },
  },
  twitter: {
    card: "summary_large_image",
    title:
      homePageData?.attributes?.seo?.twitterTitle ??
      homePageData?.attributes?.seo?.title,
    description:
      homePageData?.attributes?.seo?.twitterDescription ??
      homePageData?.attributes?.seo?.description,
    image: homePageData?.attributes?.seo?.twitterImage?.data
      ? `${import.meta.env.PUBLIC_ASSET_URL}${homePageData?.attributes?.seo?.twitterImage?.data?.attributes?.url}`
      : `${Astro.site}placeholder_tw.png`,
  },
};
---

<BaseLayout seoData={seoData}>
  {
    homePageData.attributes?.content.map((component) => {
      if (component.__component === "interactive.slider" && !component.hide) {
        return <Slider slides={component.slides} />;
      }
      if (
        component.__component === "static.featured-content" &&
        !component.hide
      ) {
        return (
          <section class="container px-4 mx-auto mb-20">
            <FeaturedContent
              title={component.title}
              description={component.description}
              image={component.image.data}
              button={component.button}
            />
          </section>
        );
      }
      if (component.__component === "static.wysiwyg" && !component.hide) {
        return (
          <section class="container px-4 mx-auto mb-20">
            <div
              class="[&>p]:text-xl [&>p]:mb-4 [&>h3]:mb-4 [&>h3]:font-display [&>h3]:font-bold [&>h3]:text-xl [&>blockquote]:px-2 [&>blockquote]:py-2.5 [&>blockquote]:bg-accent [&>blockquote]:font-display [&>blockquote]:text-2l [&>blockquote]:md:text-2xl [&>blockquote]:mb-4 em-editor-content"
              set:html={component.content}
            />
          </section>
        );
      }
      if (
        component.__component === "static.images-with-decoration" &&
        !component.hide
      ) {
        return (
          component.images.data?.length > 0 && (
            <section>
              <ImagesWithDecoration images={component.images.data} />
            </section>
          )
        );
      }
      if (
        component.__component === "static.content-preview-grid" &&
        !component.hide
      ) {
        return (
          <section class="container px-4 mx-auto mb-20">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-x-8 gap-y-6 lg:gap-y-14">
              {component.contentPreviewItem.map((item) => {
                return (
                  <ContentPreview
                    title={item.title}
                    link={item.link}
                    featuredTag={{ title: item.tag }}
                  />
                );
              })}
            </div>
          </section>
        );
      }
      if (
        component.__component === "static.text-with-side-image" &&
        !component.hide
      ) {
        return (
          <section class="container px-4 mx-auto mb-20">
            <TextWithSideImage
              text={component.text}
              image={component.image.data}
            />
          </section>
        );
      }
    })
  }

  <section class="container px-4 mx-auto mb-20">
    <h2
      class="mb-6 text-2xl font-bold text-center md:mb-10 lg:mb-20 md:text-3xl lg:text-4xl font-display text-dark"
    >
      Network
    </h2>
    <div
      class="grid flex-col items-center justify-center flex-grow grid-cols-2 gap-6 lg:gap-8 xl:gap-12 lg:flex lg:flex-row lg:flex-wrap sm:flex-row"
    >
      {
        networkMembers
          .sort((a, b) => a.attributes.rank - b.attributes.rank)
          .map((member) => {
            return (
              <div class="items-center justify-center lg:flex lg:w-[calc(25%_-_3rem)] grow-0 lg:self-end">
                {member.attributes?.url ? (
                  <a
                    class="flex-col justify-center lg:mb-5 sm:inline-block aspect-[8/3] group"
                    href={member.attributes?.url}
                    target="_blank"
                  >
                    {member.attributes?.logo.data && (
                      <img
                        loading="lazy"
                        src={`${import.meta.env.PUBLIC_ASSET_URL}${
                          member.attributes?.logo.data.attributes?.url
                        }`}
                        alt=""
                        class="w-auto h-auto group-hover:opacity-95 transition-opacity duration-100 ease-in-out"
                      />
                    )}
                    <div>
                      <h3 class="mt-auto text-xl font-normal text-center lg:text-2xl font-display group-hover:text-accent transition-colors duration-100 ease-in-out">
                        {member.attributes?.name}
                      </h3>
                    </div>
                  </a>
                ) : (
                  <div class="flex flex-col  justify-center lg:mb-5 sm:inline-block aspect-[8/3]">
                    {member.attributes?.logo.data && (
                      <img
                        loading="lazy"
                        src={`${import.meta.env.PUBLIC_ASSET_URL}${
                          member.attributes?.logo.data.attributes?.url
                        }`}
                        alt=""
                        class="w-auto h-auto"
                      />
                    )}
                    <div>
                      <h3 class="mt-auto text-xl font-normal text-center lg:text-2xl font-display">
                        {member.attributes?.name}
                      </h3>
                    </div>
                  </div>
                )}
              </div>
            );
          })
      }
    </div>
  </section>
</BaseLayout>

<script>
  import Splide from "@splidejs/splide";
  import "@splidejs/splide/css/core";

  document.addEventListener("DOMContentLoaded", function () {
    new Splide("#image-carousel", {
      type: "fade",
      rewind: true,
    }).mount();
  });
</script>
