---
import { createPngDataUri } from "unlazy/blurhash";
import BaseLayout from "../../layouts/BaseLayout.astro";
import fetchApi from "../../lib/strapi";
import TagComponent from "../../components/Tag.astro";
import PublishDate from "../../components/PublishDate.astro";
import type Tag from "../../interfaces/tag";
import type Publication from "../../interfaces/publication";

export async function getStaticPaths() {
  const tags = await fetchApi<Tag[]>({
    endpoint: "tags",
    wrappedByKey: "data",
    query: {
      // @ts-expect-error
      populate: [
        "posts",
        "posts.featuredImage",
        "posts.tags",
        "publications",
        "publications.featuredImage",
        "publications.tags",
      ],
      // @ts-expect-error
      pagination: {
        pageSize: 9999,
      },
    },
  });

  return tags.map((tag: Tag) => ({
    params: { slug: tag.attributes?.slug },
    props: tag,
  }));
}
type Props = Tag;
const tag = Astro.props;

const tagNewsAndPublications = [
  ...(tag.attributes?.posts.data ?? []).map((post) => ({
    ...post,
    type: "news",
  })),
  ...(tag.attributes?.publications.data ?? []).map((publication) => ({
    ...publication,
    type: "publication",
  })),
] as PublicationWithType[];

interface PublicationWithType extends Publication {
  type: "news" | "publication";
}

let blurhashDataUris: Map<string, string> = new Map();

tagNewsAndPublications.forEach((item) => {
  const blurhash = item.attributes?.featuredImage?.data?.attributes?.blurhash;
  if (blurhash) {
    const dataUri = createPngDataUri(blurhash);
    blurhashDataUris.set(item.attributes?.slug, dataUri);
  }
});
---

<BaseLayout>
  <h2
    class="mb-6 text-2xl font-bold text-center md:mb-10 lg:mb-20 md:text-3xl lg:text-4xl font-display"
  >
    #{tag.attributes?.title}
  </h2>
  <section class="max-w-screen-lg px-4 mx-auto mb-20">
    <ul class="space-y-14 lg:space-y-0 lg:grid lg:grid-cols-3 lg:gap-8">
      {
        tagNewsAndPublications
          ?.sort(
            (a, b) =>
              +new Date(b.attributes.publishedAt) -
              +new Date(a.attributes.publishedAt)
          )
          .map((item: PublicationWithType) => (
            <li class="leading-none">
              {item.attributes?.featuredImage?.data &&
                item.attributes?.featuredImage?.data.attributes?.url && (
                  <a
                    href={
                      item.type === "news"
                        ? `/news/${item.attributes?.slug}/`
                        : `/publications/${item.attributes?.slug}/`
                    }
                    class="inline-block aspect-[9/7] mb-5 lg:mb-4 w-full"
                  >
                    <img
                      class="object-cover w-full h-full text-xl font-display group-hover:opacity-95 duration-100 ease-in-out transition-opacity"
                      alt={
                        item.attributes?.featuredImage.data.attributes
                          .caption ?? "image"
                      }
                      src={blurhashDataUris.get(item.attributes?.slug)}
                      width={
                        item.attributes?.featuredImage.data?.attributes.width
                      }
                      height={
                        item.attributes?.featuredImage.data?.attributes.height
                      }
                      data-src={`${import.meta.env.PUBLIC_ASSET_URL}${
                        item.attributes?.featuredImage.data?.attributes?.url
                      }`}
                      data-srcset={
                        `${import.meta.env.PUBLIC_ASSET_URL}${item.attributes.featuredImage.data.attributes.formats.thumbnail.url} ${item.attributes.featuredImage.data.attributes.formats.thumbnail.width}w, ` +
                        `${import.meta.env.PUBLIC_ASSET_URL}${item.attributes.featuredImage.data.attributes.formats.small.url} ${item.attributes.featuredImage.data.attributes.formats.small.width}w, ` +
                        `${item.attributes?.featuredImage.data?.attributes.formats.medium?.url ? `${import.meta.env.PUBLIC_ASSET_URL}${item.attributes.featuredImage.data.attributes.formats.medium.url} ${item.attributes.featuredImage.data.attributes.formats.medium.width}w, ` : ""}` +
                        `${item.attributes?.featuredImage.data?.attributes.formats.large?.url ? `${import.meta.env.PUBLIC_ASSET_URL}${item.attributes.featuredImage.data.attributes.formats.large.url} ${item.attributes.featuredImage.data.attributes.formats.large.width}w, ` : ""}` +
                        `${item.attributes?.featuredImage.data?.attributes.formats.xlarge?.url ? `${import.meta.env.PUBLIC_ASSET_URL}${item.attributes.featuredImage.data.attributes.formats.xlarge.url} ${item.attributes.featuredImage.data.attributes.formats.xlarge.width}w` : ""}`
                      }
                      loading="lazy"
                    />
                  </a>
                )}
              <a
                href={
                  item.type === "news"
                    ? `/news/${item.attributes?.slug}/`
                    : `/publications/${item.attributes?.slug}/`
                }
                class="block"
              >
                <h2 class="text-xl font-display">{item.attributes?.title}</h2>
              </a>
              <div class="mt-3">
                <PublishDate date={item.attributes?.publishedAt} />
              </div>
              {item.attributes?.tags?.data &&
                item.attributes?.tags?.data.length > 0 && (
                  <ul class="flex flex-wrap gap-4 mt-3">
                    {item.attributes?.tags.data.map((tag) => (
                      <li>
                        <TagComponent
                          label={tag.attributes?.title}
                          url={`/tag/${tag.attributes?.slug}`}
                        />
                      </li>
                    ))}
                  </ul>
                )}
            </li>
          ))
      }
    </ul>
  </section>
</BaseLayout>
