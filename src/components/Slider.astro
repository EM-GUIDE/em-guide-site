---
import { createPngDataUri } from "unlazy/blurhash";
import type { SlideItem } from "../interfaces/components";
import { generateSrcSet } from "../scripts/utils";

interface Props {
  slides: SlideItem[];
}

const { slides } = Astro.props as Props;

console.log(slides)

const slidesWithBlurhash: SlideItem[] = slides.map((item: SlideItem) => {
  const blurhashDataUri = item.image?.data?.attributes?.blurhash
    ? createPngDataUri(item.image?.data?.attributes?.blurhash)
    : undefined;

  return {
    ...item,
    image: {
      ...item.image,
      data: {
        ...item.image.data,
        attributes: {
          ...item.image.data.attributes,
          blurhash: blurhashDataUri,
        },
      },
    },
  };
});
---

<section
  class="relative bg-no-repeat bg-cover lg:bg-contain pt-14 md:pb-40 lg:pb-28 mb-14 md:mb-28 bg-carousel-background bg-[-50%] lg:bg-[160%] xl:bg-[120%] md:min-h-[600px] xl:min-h-[722px]"
>
  <div
    id="image-carousel"
    class="max-w-screen-lg relative mx-auto px-4 splide"
    aria-label="Beautiful Images"
  >
    <div
      class={`pointer-events-none absolute bottom-0 z-10 left-0 justify-between w-full px-8 pt-2 lg:pt-0 -translate-y-[90%] sm:-translate-y-3/4 md:-translate-y-1/2 lg:-translate-y-3/4 splide__arrows top-1/2 ${slidesWithBlurhash.length > 1 ? "flex" : "hidden"}`}
    >
      <button
        class="w-16 splide__arrow splide__arrow--prev pointer-events-auto group"
      >
        <svg
          class="h-fit"
          width="98"
          height="95"
          viewBox="0 0 98 95"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M2.99999 47.4705L42.4006 7.10655C47.9646 1.40645 59.0012 4.71391 58.2227 17.0289L45.4288 30.1356L77.6739 30.1415L94.5894 47.4705L76.7695 65.7261L46.3389 65.7261L55.1601 74.763C60.7185 80.4689 57.4957 91.7694 45.4631 90.9719L2.99999 47.4705Z"
            class="text-white group-hover:sm:text-accent transition-colors duration-200 ease-in-out"
            stroke="currentColor"
            stroke-width="4"
            stroke-miterlimit="10"></path>
        </svg>
      </button>
      <button
        class="w-16 splide__arrow splide__arrow--next pointer-events-auto group"
      >
        <svg
          class="h-fit"
          width="98"
          height="92"
          viewBox="0 0 98 92"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M94.5894 46.4706L55.1888 86.8345C49.6247 92.5346 38.5882 89.2272 39.3667 76.9121L52.1606 63.8054L19.9154 63.7996L2.99999 46.4706L20.8198 28.215L51.2504 28.215L42.4292 19.1781C36.8709 13.4721 40.0937 2.17163 52.1262 2.96917L94.5894 46.4706Z"
            class="text-white group-hover:sm:text-accent transition-colors duration-200 ease-in-out"
            stroke="currentColor"
            stroke-width="4"
            stroke-miterlimit="10"></path>
        </svg>
      </button>
    </div>

    <div class="splide__track">
      <ul class="splide__list bg-transparent">
        {
          slidesWithBlurhash.map((slide) => {
            return (
              <li class="relative splide__slide">
                {slide.url ? (
                  <a href={slide.url}>
                    {slide.image.data && (
                      <img
                        class="w-full h-auto object-cover aspect-[5/4] lg:aspect-[9/4]"
                        width={slide.image.data.attributes.width}
                        height={slide.image.data.attributes.height}
                        alt={slide.image.data.attributes.caption ?? "image"}
                        src={slide.image.data.attributes.blurhash}
                        data-src={`${import.meta.env.PUBLIC_ASSET_URL}${
                          slide.image.data.attributes?.url
                        }`}
                        data-srcset={generateSrcSet(slide.image.data, [
                          "thumbnail",
                          "small",
                          "medium",
                          "large",
                          "xlarge",
                        ])}
                        sizes="auto"
                        loading="lazy"
                      />
                    )}
                  </a>
                ) : (
                  <>
                    {slide.image.data && (
                      <img
                        class="w-full h-auto object-cover aspect-[5/4] lg:aspect-[9/4]"
                        width={slide.image.data.attributes.width}
                        height={slide.image.data.attributes.height}
                        alt={slide.image.data.attributes.caption ?? "image"}
                        src={slide.image.data.attributes.blurhash}
                        data-src={`${import.meta.env.PUBLIC_ASSET_URL}${
                          slide.image.data.attributes?.url
                        }`}
                        data-srcset={generateSrcSet(slide.image.data, [
                          "thumbnail",
                          "small",
                          "medium",
                          "large",
                          "xlarge",
                        ])}
                        sizes="auto"
                        loading="lazy"
                      />
                    )}
                    <div class="absolute inline-block w-full px-10 bottom-14 lg:px-28">
                    </div>
                  </>
                )}
                {slide.url ? (
                  <a href={slide.url} class="mt-5 inline-block w-full px-10 bottom-14 lg:px-28">
                    {!!slide.textMobileOverwrite ? (
                      <h4 class="block sm:hidden text-xl leading-normal text-center text-black lg:text-4xl font-display">
                        {slide.textMobileOverwrite}
                      </h4>
                      <h4 class="hidden sm:block text-2xl leading-normal text-center text-black lg:text-4xl font-display">
                        {slide.text}
                      </h4>
                    ) : (
                    <h4 class="block text-2xl leading-normal text-center text-black lg:text-4xl font-display">
                        {slide.text}
                      </h4>
                    )}
                  </a>
                ) : (
                <div class="mt-5 inline-block w-full px-10 bottom-14 lg:px-28">
                  {!!slide.textMobileOverwrite ? (
                    <h4 class="block sm:hidden text-xl leading-normal text-center text-black lg:text-4xl font-display">
                      {slide.textMobileOverwrite}
                    </h4>
                    <h4 class="hidden sm:block text-2xl leading-normal text-center text-black lg:text-4xl font-display">
                      {slide.text}
                    </h4>
                  ) : (
                  <h4 class="block text-2xl leading-normal text-center text-black lg:text-4xl font-display">
                      {slide.text}
                    </h4>
                  )}
                </div>
                )}
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</section>
